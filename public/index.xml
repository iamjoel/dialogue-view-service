<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Joel 的大唠嗑</title>
      <link>https://iamjoel.github.io/dialogue</link>
      <description>Last 10 notes on Joel 的大唠嗑</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Next.js 的客户端组件，和你想的不一样</title>
    <link>https://iamjoel.github.io/dialogue/personal/viewpoint/content/tech/client-side-component-in-nextjs/readme</link>
    <guid>https://iamjoel.github.io/dialogue/personal/viewpoint/content/tech/client-side-component-in-nextjs/readme</guid>
    <description>Next.js 的组件分为服务端组件(server-components)和客户端组件(client-components)。服务端组件只在服务端运行，运行完的结果直接输出到客户端。那么，客户端组件是只在客户端运行吗？ 我们来看下面这个客户端组件： &#039;use client&#039; import type { FC } from &#039;react&#039; import React, { useEffect } from &#039;react&#039; const Test: FC = () =&gt; { const [num, setNum] = React.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:18 GMT</pubDate>
  </item><item>
    <title>WorkOS</title>
    <link>https://iamjoel.github.io/dialogue/text/w/workos</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/workos</guid>
    <description>官网 Your app,Enterprise Ready. Start selling to enterprise customers with just a few lines of code. Implement features like single sign-on in minutes instead of months.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>Writer</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writer</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writer</guid>
    <description> Transform work with full-stack generative AI Writer 基于 LLM 的 2B 的企业营销内容创作平台。 2020 年成立。 其收入在过去两年翻了 10 倍，收入规模超过 2,000 万美金，且 NDR 超过 150%。 自研了LLM： Palmyra。在获得商业授权的 1 万亿 tokens 的数据集上进行训练，并针对医疗保健、营销、法律等领域进行了微调，更好地满足专业垂直领域内容写作者的需求。Writer 很注重模型优化，使模型更小、更快速且成本更低。 亮点 准确性，安全性。 准确性 Top-ranked by Stanford HELM for a range of scenarios, PubMedQA for biomedical question answering, and BLEU for translations.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>Writesonic</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writesonic</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writesonic</guid>
    <description>官网 Generative AI Platform for Content Creation, SEO and AI Chatbots. 写营销文，博客，SEO。.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>用 Dessix 生成小学生优秀作文范例</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-for-primary-school-by-dessix</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-for-primary-school-by-dessix</guid>
    <description>对于低年级的小学生来说，写作文往往是一件令人头疼的事。他们的词汇量有限，逻辑组织能力也还在培养阶段，因此常常不知道从何下笔。需要读一些示例来参考。有没有一种办法，快速生成优秀的作文示例呢？ 我们用 Dessix 可以轻松实现这件事。具体可以看下面的视频： Dessix 可以简单理解为集成 LLM 的知识库管理软件。下面我们来看下具体实现吧。 写作流程 写作可以分成 3 步： 确定内容。 生成大纲。 开始写作。 在 Dessix 中，我们可以用 Action 来自动化每个步骤。可以把 Action 理解成一个文本转化器：让 LLM 根据要求(即 Prompt)，把文本转化成目标文本。比如，第 1 步 确定内容。我们给 LLM 的 要求是这样的： 你是一位专业的写作辅导老师，专注于帮助三年级小学生写出有趣、富有创意的作文。请根据要求生成 3-5 个不同的写作内容方向，并为每个方向提供简单的背景说明。内容要有吸引力并符合三年级小学生的水平，便于用户选择。 输出： 多个写作方向（至少 3 个），包括： 1.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>非虚构类写作</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-non-fiction</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-non-fiction</guid>
    <description> We believe that writing is a tool for thinking. If we can build a tool for helping people write and organize their ideas more effectively, we can help them have better thoughts and solve otherwise intractable problems.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>介绍解决方案的结构</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-struct-solution</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-struct-solution</guid>
    <description>结构 以《费曼学习法》写一篇文章，按照下面的结构写。{} 中的内容，需要按照实际的情况做替换。结构如下: {引入解决方案的场景。如“你是否经历过这样的困境：.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>结构化约束模型输出</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-struct-to-improve-output</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-struct-to-improve-output</guid>
    <description>AI 写作技巧.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>古典主义 写作风格</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-style-classic</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-style-classic</guid>
    <description> 古典风格是简洁的，但并不简单，它总会带读者看到那些不一样的真相。“早起的鸟儿有虫吃”，这是朴素风格；“早起的鸟儿有虫吃，但第二只老鼠有奶酪吃”（因为第一只老鼠被捕鼠器逮着了），这才是古典风格。 古典主义风格的特点：简洁、清晰和真实。 清晰 无论写作的主题多么复杂或者作者的才华多么出众，如果读者无法理解所写内容，那么写作就是失败的。 遵循语法规则与逻辑结构 语法是构建清晰表达的基础。正确的语法使用有助于准确地传达信息。同时，逻辑结构如同建筑的框架，合理的逻辑顺序（如因果关系、递进关系、对比关系等）能使文章层次分明，让读者轻松理解作者的意图。 词汇的选择与搭配 合适的词汇能够精准地表达思想。避免使用模糊、歧义或者过于生僻的词汇，同时也要注意词汇之间的搭配是否符合语言习惯。例如，一些动词和名词的搭配在特定语境下有固定的用法，正确使用这些搭配可以增强表达的准确性和流畅性。 资源 《风格感觉：21 世纪写作指南》 .</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item><item>
    <title>技术类文章写作的SOP</title>
    <link>https://iamjoel.github.io/dialogue/text/w/writing-tech-sop</link>
    <guid>https://iamjoel.github.io/dialogue/text/w/writing-tech-sop</guid>
    <description> 确定技术类文章的范围等。 把技术类文章按功能来分类。 每个分类找一些优秀文章。 解构优秀文章，给每个分类做 SOP。 分类越小，SOP 越好做。 0 背景 写技术文章两个目标： 帮助自己提升对技术的理解。 提升自己(公众号)的影响力。能找到志同道合的人。顺便也赚点广告费。 因此，技术文章希望： 有深度。 有热度。在热点中匹配自己想兴趣的。 专门来做个新的公众号，来做偏流量获取的文章。 0.</description>
    <pubDate>Mon, 10 Mar 2025 05:04:03 GMT</pubDate>
  </item>
    </channel>
  </rss>